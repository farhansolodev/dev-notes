/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CST
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// node_modules/monkey-around/mjs/index.js
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const original = obj[method], hadOwn = obj.hasOwnProperty(method);
  let current = createWrapper(original);
  if (original)
    Object.setPrototypeOf(current, original);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, original || Function);
  }
}

// src/logs.ts
function debug(...args) {
  args.forEach((arg) => {
    if (typeof arg === "string") {
      console.debug(arg);
    } else {
      const variableName = Object.keys(arg)[0];
      console.debug(`${variableName}: ${arg[variableName]}`);
    }
  });
}

// src/settings.ts
var import_obsidian = require("obsidian");
var CSTSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Close Similar Tabs" });
    const content = `
		<p>
		Repository: \u{1F334} <a href="https://github.com/1C0D/Obsidian-Close-Similar-Tabs">1C0D/Obsidian-Close-Similar-Tabs</a> \u{1F334}
		</p>
		`;
    containerEl.createDiv("", (el) => {
      el.innerHTML = content;
    });
    new import_obsidian.Setting(containerEl).setName("Quick switch").setDesc("Enable/disable Close Similar Tabs").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.switch).onChange((value) => {
        this.plugin.settings.switch = value;
        this.plugin.saveSettings();
        const message = this.plugin.settings.switch ? "Close similar tabs ON" : "Close similar tabs OFF";
        new import_obsidian.Notice(`${message}`);
      });
    });
    new import_obsidian.Setting(containerEl).setName("Close by window").setDesc(
      "Select whether the plugin will only close similar tabs within the same window, or throughout all open windows."
    ).addDropdown((dropdown) => {
      dropdown.addOptions({
        current: "Current window only",
        all: "All windows"
      }).setValue(this.plugin.settings.byWindow).onChange(async (value) => {
        if (value === "all" || value === "current") {
          this.plugin.settings.byWindow = value;
          this.plugin.saveSettings();
        }
      });
    });
    containerEl.createEl("p", {
      text: `options about not having several empty tabs and pinned tabs are getting back soon`
    });
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  byWindow: "current",
  switch: true
};
var CST = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    await this.saveSettings();
    this.addSettingTab(new CSTSettingsTab(this.app, this));
    this.link = false;
    const { openLinkPatched, openFilePatched } = this.openLinkWrapper(this);
    this.register(openLinkPatched);
    this.register(openFilePatched);
    this.addCommand({
      id: "quick-switch",
      name: "Switch",
      callback: async () => {
        this.settings.switch = !this.settings.switch;
        const message = this.settings.switch ? "Close similar tabs ON" : "Close similar tabs OFF";
        new import_obsidian2.Notice(`${message}`);
        await this.saveSettings();
      }
    });
  }
  openLinkWrapper(plugin) {
    const openLinkPatched = around(import_obsidian2.Workspace.prototype, {
      openLinkText(oldOpenLinkText) {
        return async function(...args) {
          if (!plugin.settings.switch) {
            oldOpenLinkText.apply(this, args);
            return;
          }
          console.debug("Open Link");
          plugin.link = true;
          setTimeout(async () => {
            plugin.link = false;
          }, 400);
          debug({ args });
          let result;
          let [linktext, sourcePath, newLeaf, OpenViewState] = args;
          if (linktext == null ? void 0 : linktext.includes(
            sourcePath.split(".").slice(0, -1).join(".")
          )) {
            newLeaf = false;
            oldOpenLinkText.apply(this, [
              linktext,
              sourcePath,
              newLeaf,
              OpenViewState
            ]);
            result = 1;
          } else {
            const activeLeaf = plugin.getActiveLeaf();
            const {
              isMainWindow: isMainWindowActive,
              rootSplit: rootSplitActive,
              el: activeEl
            } = plugin.getLeafProperties(activeLeaf);
            if (!rootSplitActive && isMainWindowActive)
              return;
            result = plugin.iterate(
              plugin,
              activeEl,
              linktext,
              newLeaf
            );
          }
          if (!result) {
            oldOpenLinkText.apply(this, args);
          }
          return;
        };
      }
    });
    const openFilePatched = around(import_obsidian2.WorkspaceLeaf.prototype, {
      //@ts-ignore
      openFile(oldOpenFile) {
        return function(...args) {
          if (!plugin.settings.switch) {
            oldOpenFile.apply(this, args);
            return;
          }
          console.debug("Open File");
          console.log(...args);
          const [file, openState] = args;
          let result;
          if (!plugin.link) {
            const activeLeaf = plugin.getActiveLeaf();
            const {
              isMainWindow: isMainWindowActive,
              rootSplit: rootSplitActive,
              el: activeEl
            } = plugin.getLeafProperties(activeLeaf);
            if (!rootSplitActive && isMainWindowActive)
              return;
            result = plugin.iterate(plugin, activeEl, file.path);
          }
          if (!result) {
            oldOpenFile && oldOpenFile.apply(this, args);
          }
          return;
        };
      }
    });
    return {
      openLinkPatched,
      openFilePatched
    };
  }
  delActive() {
    const activeLeaf = this.getActiveLeaf();
    activeLeaf == null ? void 0 : activeLeaf.detach();
  }
  getActiveLeaf() {
    return app.workspace.getLeaf();
  }
  getLeafProperties(leaf, notActive = false) {
    const isMainWindow = leaf.view.containerEl.win === window;
    const rootSplit = leaf.getRoot() === this.app.workspace.rootSplit;
    const el = leaf.parentSplit.containerEl;
    if (notActive) {
      const isSameWindow = leaf.view.containerEl.win == activeWindow;
      return { isMainWindow, rootSplit, el, isSameWindow };
    }
    return { isMainWindow, rootSplit, el };
  }
  iterate(plugin, activeEl, target, newLeaf) {
    let result;
    app.workspace.iterateAllLeaves((leaf) => {
      var _a, _b;
      const {
        isMainWindow: isMainWindowDupli,
        rootSplit: rootSplitDupli,
        el: dupliEl,
        isSameWindow: isSameWindowDupli
      } = this.getLeafProperties(leaf, true);
      if (isMainWindowDupli && !rootSplitDupli || //not sidebars
      isSameWindowDupli && activeEl != dupliEl || //split window
      !isSameWindowDupli && this.settings.byWindow === "current") {
        return;
      }
      const viewState = leaf.getViewState();
      if ((_b = (_a = viewState.state) == null ? void 0 : _a.file) == null ? void 0 : _b.includes(target)) {
        if (!newLeaf)
          plugin.delActive();
        const cursPos = leaf.getEphemeralState();
        app.workspace.setActiveLeaf(leaf);
        leaf.setEphemeralState(cursPos);
        result = 1;
      }
    });
    return result;
  }
  async loadSettings() {
    this.settings = { ...DEFAULT_SETTINGS, ...await this.loadData() };
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
